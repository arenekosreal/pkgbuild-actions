name: Build container image, publish to ghcr.io and test actions
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 8 * * *'

jobs:
  build-container:
    name: Build container image and publish to ghcr.io
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/pkgbuild-builder

      - name: Login to ghcr.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Buiild images and push
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: linux/amd64,linux/arm64
      
      - name: Clean useless container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: pkgbuild-builder
          package-type: container
          min-versions-to-keep: 5
          delete-only-untagged-versions: 'true'

  test-update-pacman-repo:
    name: Test update-pacman-repo action
    needs:
      - build-container
    if: github.event_name != 'schedule'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create directory
        run: mkdir -p repo

      - name: Run action
        id: test
        uses: ./update-pacman-repo
        with:
          directory: repo   

      - name: Check result
        run: |
          test -f repo/repo.db.tar.gz
          test -f repo/repo.files.tar.gz
          test -L repo/repo.db
          test -L repo/repo.files

  test-bump-pkgver:
    name: Test bump-pkgver action
    needs:
      - build-container
      - test-update-pacman-repo
    if: github.event_name != 'schedule'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
        env:
          - ''
          - CUSTOM_ENVIRONMENT=custom-value
        repo:
          - ''
          - repo
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create repo
        run: mkdir -p repo

      - name: Generate repo
        if: matrix.repo
        uses: ./update-pacman-repo
        with:
          directory: repo

      - name: Run action
        id: test
        uses: ./bump-pkgver
        with:
          directory: ./tests/build-test
          env: ${{ matrix.env }}
          repo: ${{ matrix.repo }}

      - name: Check result
        run: |
          test "${{ steps.test.outputs.updated }}" == 'true'

  test-build:
    name: Test build action
    needs:
      - build-container
      - test-update-pacman-repo
    if: github.event_name != 'schedule'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm

        env:
          - ''
          - CUSTOM_ENVIRONMENT=custom-value

        repo:
          - ''
          - repo
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create repo
        run: mkdir -p repo

      - name: Generate repo
        if: matrix.repo
        uses: ./update-pacman-repo
        with:
          directory: repo

      - name: Run action
        id: test
        uses: ./build
        with:
          directory: ./tests/build-test
          env: ${{ matrix.env }}
          repo: ${{ matrix.repo }}

      - name: Check outputs
        run: |
          while read -r package
          do
            test -f "$package"
          done <<< "${{ steps.test.outputs.packages }}"

      - name: Check env
        if: matrix.env
        run: |
          while read -r package
          do
            mkdir -p rootfs
            tar -x -f "$package" -C rootfs
            grep "${{ matrix.env }}" rootfs/var/env
            rm -r rootfs
          done <<< "${{ steps.test.outputs.packages }}"

  test-get-global-variable:
    name: Test get-global-variable action
    needs:
      - build-container
    if: github.event_name != 'schedule'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run action
        id: test
        uses: ./get-global-variable
        with:
          directory: ./tests/build-test
          name: pkgbase

      - name: Check result
        run: |
          test "${{ steps.test.outputs.value }}" = "build-test"

  test-fetch-pgp-keys:
    name: Test fetch-pgp-keys action
    needs:
      - build-container
    if: github.event_name != 'schedule'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run action
        id: test
        uses: ./fetch-pgp-keys
        with:
          directory: ./tests/build-test

      - name: Check result
        run: |
          read -r -a fingerprints <<< "${{ steps.test.outputs.validpgpkeys }}"
          for fingerprint in "${fingerprints[@]}"
          do
            test -f ./tests/build-test/keys/pgp/$fingerprint.asc
            gpg --import ./tests/build-test/keys/pgp/$fingerprint.asc
            gpg --list-key $fingerprint
          done

  test-download-sources:
    name: Test download-sources action
    needs:
      - build-container
    if: github.event_name != 'schedule'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run action
        id: test
        uses: ./download-sources
        with:
          directory: ./tests/build-test

      - name: Check result
        run: |
          test -f srcdest/gh_2.65.0_linux_amd64.tar.gz
          test -f srcdest/gh-linux.deb
